name: Deploy Lambda via CodeDeploy (Python 3.11)

on:
  push:
    branches: [ main ]

permissions:
  id-token: write
  contents: read

env:
  AWS_REGION: us-east-2                         # change if needed
  LAMBDA_FUNCTION: putModel                     # exact Lambda name
  LAMBDA_ALIAS: live
  CD_APP: acmemodels-lambda-app                 # your CodeDeploy application name
  CD_DG: acmemodels-lambda-dg                   # your deployment group name

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq

      # If you have requirements.txt, we'll vendor deps into the zip
      - name: Install dependencies (if any)
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt -t .lambda_pkgs; fi

      # Bundle: site-packages first, then your src/ (so handler src.CLIApp.handler works)
      - name: Create deployment zip
        run: |
          rm -f build/function.zip
          mkdir -p build
          if [ -d .lambda_pkgs ]; then (cd .lambda_pkgs && zip -r ../build/function.zip . -x "*/__pycache__/*" "*.dist-info/*" ".DS_Store"); fi
          zip -gr build/function.zip src -x "*/__pycache__/*" "*.pyc" ".DS_Store"

      - name: Configure AWS (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::963604113709:role/GitHubActionsDeployRole
          aws-region: ${{ env.AWS_REGION }}

      - name: Update Lambda code (publishes new version)
        id: update
        run: |
          aws lambda update-function-code \
            --function-name "${LAMBDA_FUNCTION}" \
            --zip-file fileb://build/function.zip \
            --publish > update.json

      - name: Get current & target versions
        id: vers
        run: |
          CUR=$(aws lambda get-alias --function-name "${LAMBDA_FUNCTION}" --name "${LAMBDA_ALIAS}" --query 'FunctionVersion' --output text)
          TGT=$(jq -r '.Version' update.json)
          echo "CUR=$CUR" >> $GITHUB_OUTPUT
          echo "TGT=$TGT" >> $GITHUB_OUTPUT
          echo "Current=$CUR  Target=$TGT"

      - name: Build AppSpec & revision JSON (proper escaping)
        run: |
          # 1) Build the AppSpec object (regular JSON)
          jq -n \
            --arg fn "$LAMBDA_FUNCTION" \
            --arg al "$LAMBDA_ALIAS" \
            --arg cur "${{ steps.vers.outputs.CUR }}" \
            --arg tgt "${{ steps.vers.outputs.TGT }}" \
            '{version:0.0,
              Resources:[
                {myLambdaFunction:{
                  Type:"AWS::Lambda::Function",
                  Properties:{Name:$fn, Alias:$al, CurrentVersion:$cur, TargetVersion:$tgt}
                }}
              ]}' > appspec.json

          # 2) Convert the AppSpec to a JSON *string* for the CLI
          APPSTR=$(jq -Rs . < appspec.json)

          # 3) Build the --revision payload using the encoded string
          jq -n --arg content "$APPSTR" '{AppSpecContent:{Content:($content|fromjson|tostring)}}' > revision.json
          # The fromjson|tostring round-trip ensures a clean compact string

          echo "AppSpec:"
          cat appspec.json
          echo "Revision wrapper:"
          cat revision.json

      - name: Trigger CodeDeploy canary
        run: |
          aws deploy create-deployment \
            --application-name "${CD_APP}" \
            --deployment-group-name "${CD_DG}" \
            --deployment-config-name CodeDeployDefault.LambdaCanary10Percent5Minutes \
            --revision file://revision.json

